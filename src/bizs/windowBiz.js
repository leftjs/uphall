// Generated by CoffeeScript 1.10.0
(function() {
  var Utils, _, addWindow, commonBiz, config, db, getAllWindows, getWindow, getWindowsByConditions, removeWindow, updateWindow;

  db = require('./../libs/db');

  config = require('./../config/config');

  commonBiz = require('./commonBiz');

  Utils = require('./../utils/Utils');

  _ = require('underscore');

  addWindow = function(req, res, next) {
    var body, postData, userInfo;
    body = req.body;
    userInfo = req.userInfo;
    if (!userInfo.is_windower) {
      return next(commonBiz.customError(400, "您还不是窗口管理者,请先申请认证"));
    }
    postData = {
      windowName: body.windowName != null ? body.windowName : body.windowName = '张师傅的窗口',
      address: body.address != null ? body.address : body.address = '1楼红椅区12号窗',
      type: body.type != null ? body.type : body.type = '综合',
      shopping_breakfast: body.shopping_breakfast != null ? body.shopping_breakfast : body.shopping_breakfast = false,
      shopping_lunch: body.shopping_lunch != null ? body.shopping_lunch : body.shopping_lunch = false,
      shopping_dinner: body.shopping_dinner != null ? body.shopping_dinner : body.shopping_dinner = false,
      description: body.description != null ? body.description : body.description = '一个新兴的势力',
      bulletin: body.bulletin != null ? body.bulletin : body.bulletin = '打包免餐盒费,节假日午休',
      promotion: body.promotion != null ? body.promotion : body.promotion = '买一送一',
      rate_score: 5.0,
      sale_a_month: 0,
      sale_a_day: 0,
      createDate: Date.now(),
      resting: false,
      is_delete: false,
      icon: '',
      author: {
        id: userInfo._id,
        name: userInfo.name
      }
    };
    return db.windows.insert(postData, function(err, shop) {
      if (err) {
        return next(err);
      }
      return res.json({
        msg: '添加成功',
        id: shop._id
      });
    });
  };

  getWindow = function(req, res, next) {
    var id;
    id = req.params['id'];
    return db.windows.findOne({
      _id: id
    }, function(err, window) {
      if (err) {
        return next(err);
      }
      if (window) {
        return res.json(window);
      }
      return next(commonBiz.customError(404, '未找到此窗口'));
    });
  };

  getAllWindows = function(req, res, next) {
    return db.windows.find({
      is_delete: false
    }, function(err, array) {
      if (err) {
        return next(err);
      }
      if (array.length === 0) {
        return res.json([]);
      }
      return res.json(_.map(array, function(doc) {
        delete doc.is_delete;
        return doc;
      }));
    });
  };

  getWindowsByConditions = function(req, res, next) {
    var queryParams;
    queryParams = {};
    if (req.body.type) {
      queryParams.type = req.body.type;
    }
    if (req.body.shopping_breakfast) {
      queryParams.shopping_breakfast = req.body.shopping_breakfast;
    }
    if (req.body.shopping_lunch) {
      queryParams.shopping_lunch = req.body.shopping_lunch;
    }
    if (req.body.shopping_dinner) {
      queryParams.shopping_dinner = req.body.shopping_dinner;
    }
    queryParams.is_delete = false;
    console.log(queryParams);
    return db.windows.find(queryParams, function(err, array) {
      if (err) {
        return next(err);
      }
      if (array.length === 0) {
        return res.json([]);
      }
      return res.json(_.map(array, function(doc) {
        delete doc.is_delete;
        return doc;
      }));
    });
  };

  updateWindow = function(req, res, next) {
    var doing;
    doing = function(req, res, next) {
      return db.windows.findOne({
        _id: req.params['id']
      }, function(err, doc) {
        var postData;
        postData = commonBiz.concatPostData(doc, req.body, _.without(_.keys(doc), '_id', 'author', 'rate_score', 'sale_a_month', 'sale_a_day'));
        return db.windows.update({
          _id: req.params['id']
        }, {
          $set: postData
        }, function(err, repalcedNum) {
          if (err) {
            return next(err);
          }
          if (repalcedNum === 0) {
            return next(commonBiz.customError(400, '更新失败,请重新尝试'));
          }
          return res.json(true);
        });
      });
    };
    return db.windows.findOne({
      _id: req.params['id']
    }, function(err, doc) {
      var idInToken;
      if (err) {
        return next(err);
      }
      if (!doc) {
        return next(commonBiz.customError(404, '修改失败,请重试'));
      }
      idInToken = Utils.idFromToken(req.headers['x-token']);
      if (doc.author.id !== idInToken) {
        return commonBiz.authIsAdmin(idInToken, function(flag) {
          if (flag) {
            return doing(req, res, next);
          } else {
            return next(commonBiz.customError(401, '您没有权利这么做'));
          }
        });
      } else {
        return doing(req, res, next);
      }
    });
  };

  removeWindow = function(req, res, next) {
    var doing;
    doing = function(req, res, next) {
      return db.windows.update({
        _id: req.params['id']
      }, {
        $set: {
          is_delete: true
        }
      }, function(err, numReplaced) {
        if (err) {
          return next(err);
        }
        if (numReplaced === 0) {
          return next(commonBiz.customError(400, '删除失败,请重试'));
        }
        return res.json(true);
      });
    };
    return db.windows.findOne({
      _id: req.params['id']
    }, function(err, doc) {
      var idInToken;
      if (err) {
        return next(err);
      }
      if (!doc) {
        return next(commonBiz.customError(404, '请确认所传入的id'));
      }
      idInToken = Utils.idFromToken(req.headers['x-token']);
      if (doc.author.id !== idInToken) {
        return commonBiz.authIsAdmin(idInToken, function(flag) {
          if (flag) {
            return doing(req, res, next);
          } else {
            return next(commonBiz.customError(401, '您没有权限这么做'));
          }
        });
      } else {
        return doing(req, res, next);
      }
    });
  };

  module.exports = {
    addWindow: addWindow,
    getWindow: getWindow,
    updateWindow: updateWindow,
    removeWindow: removeWindow,
    getAllWindows: getAllWindows,
    getWindowsByConditions: getWindowsByConditions
  };

}).call(this);

//# sourceMappingURL=windowBiz.js.map
